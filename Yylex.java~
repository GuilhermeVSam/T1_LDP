// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: t1.lex


@SuppressWarnings("fallthrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\0\1\2\2\3\1\4\35\0\1\5"+
    "\1\0\1\6\1\7\1\10\1\11\1\12\10\13\1\14"+
    "\5\0\1\15\4\16\1\17\25\16\2\20\1\21\3\20"+
    "\2\22\1\23\1\20\1\24\2\20\1\25\2\20\2\22"+
    "\1\26\1\22\1\27\1\30\2\20\1\31\1\32\6\20"+
    "\12\0\1\3\u01da\0\12\33\206\0\12\33\306\0\12\33"+
    "\234\0\12\33\166\0\12\33\140\0\12\33\166\0\12\33"+
    "\106\0\12\33\u0116\0\12\33\106\0\12\33\u0146\0\12\33"+
    "\46\0\12\33\u012c\0\12\33\200\0\12\33\246\0\12\33"+
    "\6\0\12\33\266\0\12\33\126\0\12\33\206\0\12\33"+
    "\6\0\12\33\316\0\2\3\u01a6\0\12\33\46\0\12\33"+
    "\306\0\12\33\26\0\12\33\126\0\12\33\u0196\0\12\33"+
    "\6\0\u0100\34\240\0\12\33\206\0\12\33\u012c\0\12\33"+
    "\200\0\12\33\74\0\12\33\220\0\12\33\166\0\12\33"+
    "\146\0\12\33\206\0\12\33\106\0\12\33\266\0\12\33"+
    "\u0164\0\62\33\100\0\12\33\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\7\1\12\0\1\2\77\0\2\3\4\0\2\4"+
    "\4\0\1\5\4\0\1\6\1\0\2\7\3\0\2\10"+
    "\21\0\2\11\2\0\2\12\1\13\10\0\2\14\1\0"+
    "\2\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\127\0\u0122\0\u013f\0\u015c\0\313\0\u0179"+
    "\0\u0196\0\u01b3\0\u01d0\0\72\0\u01ed\0\u020a\0\u0227\0\u0244"+
    "\0\u0261\0\u027e\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c"+
    "\0\u0349\0\u0366\0\u0383\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\u0414"+
    "\0\u0431\0\u044e\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc"+
    "\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4"+
    "\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc"+
    "\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4"+
    "\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862\0\u087f\0\u089c"+
    "\0\u08b9\0\u08d6\0\u08f3\0\72\0\u0910\0\u092d\0\u094a\0\u0967"+
    "\0\u0984\0\72\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15\0\72"+
    "\0\u0a32\0\u0a4f\0\u0a6c\0\u0a89\0\72\0\u0aa6\0\72\0\u0ac3"+
    "\0\u0ae0\0\u0afd\0\u0b1a\0\72\0\u0b37\0\u0b54\0\u0b71\0\u0b8e"+
    "\0\u0bab\0\u0bc8\0\u0be5\0\u0c02\0\u0c1f\0\u0c3c\0\u0c59\0\u0c76"+
    "\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea\0\u0d07\0\u0d24\0\72\0\u0d41"+
    "\0\u0d5e\0\u0d7b\0\72\0\u0d98\0\72\0\u0db5\0\u0dd2\0\u0def"+
    "\0\u0e0c\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\72\0\u0e9d\0\u0eba"+
    "\0\72\0\u0ed7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\1\5\27\3\1\4\4\3\1\5"+
    "\2\3\3\6\2\3\2\7\5\10\1\11\5\10\2\3"+
    "\46\0\3\12\17\0\1\12\2\0\1\13\42\0\1\14"+
    "\1\0\3\15\1\0\1\16\3\17\1\20\11\17\11\0"+
    "\1\21\1\0\3\17\1\0\1\16\2\22\13\17\11\0"+
    "\1\21\1\0\3\17\1\0\1\16\15\17\11\0\1\21"+
    "\1\0\3\17\1\0\1\16\14\17\1\23\3\0\1\24"+
    "\5\0\1\25\1\0\3\12\3\0\1\26\4\0\1\26"+
    "\6\0\1\12\10\0\1\27\1\0\3\30\1\0\1\16"+
    "\26\0\1\31\1\0\3\32\1\0\1\16\3\17\1\20"+
    "\11\17\20\0\15\33\11\0\1\21\1\0\3\34\1\0"+
    "\1\16\15\17\11\0\1\27\5\0\1\16\26\0\1\21"+
    "\1\0\3\17\1\0\1\16\2\35\13\17\11\0\1\21"+
    "\1\0\3\17\1\0\1\16\14\17\1\36\3\0\1\24"+
    "\7\0\3\25\3\0\1\26\4\0\1\26\6\0\1\25"+
    "\6\0\2\37\2\0\3\40\17\0\1\40\10\0\1\41"+
    "\5\0\1\16\26\0\1\42\1\0\3\43\5\0\1\42"+
    "\22\0\1\27\1\0\3\44\1\0\1\16\26\0\1\14"+
    "\1\0\3\45\1\0\1\16\3\17\1\20\11\17\2\0"+
    "\2\46\3\0\11\46\15\47\1\46\10\0\1\50\1\0"+
    "\3\51\1\0\1\16\3\17\1\52\11\17\11\0\1\21"+
    "\1\0\3\17\1\53\1\16\4\17\1\54\10\17\11\0"+
    "\1\21\1\0\3\17\1\0\1\16\12\17\1\55\2\17"+
    "\13\0\3\40\17\0\1\40\2\0\1\24\7\0\3\40"+
    "\17\0\1\40\16\0\1\16\30\0\3\56\30\0\1\42"+
    "\1\0\3\57\5\0\1\42\22\0\1\42\1\0\3\60"+
    "\5\0\1\42\21\0\1\61\1\21\1\0\3\62\1\0"+
    "\1\16\15\17\25\0\1\63\11\0\2\46\3\0\11\46"+
    "\5\47\1\64\7\47\1\46\10\0\1\27\1\0\3\56"+
    "\1\0\1\16\26\0\1\50\1\0\3\65\1\0\1\16"+
    "\3\17\1\52\11\17\11\0\1\21\1\0\3\66\1\0"+
    "\1\16\15\17\13\0\3\67\30\0\1\21\1\0\3\70"+
    "\1\0\1\16\15\17\11\0\1\21\1\0\3\17\1\71"+
    "\1\16\13\17\1\72\1\17\11\0\1\73\1\0\3\74"+
    "\5\0\1\73\22\0\1\42\11\0\1\42\22\0\1\42"+
    "\1\0\3\75\5\0\1\42\24\0\3\76\30\0\1\21"+
    "\1\0\3\77\1\0\1\16\15\17\31\0\1\100\5\0"+
    "\2\46\3\0\11\46\5\47\1\64\3\47\1\101\3\47"+
    "\1\46\10\0\1\50\1\0\3\17\1\0\1\16\3\17"+
    "\1\52\11\17\11\0\1\102\1\0\3\103\1\0\1\16"+
    "\3\17\1\104\11\17\20\0\2\105\24\0\1\21\1\0"+
    "\3\17\1\0\1\16\2\106\13\17\12\0\1\107\10\0"+
    "\1\107\22\0\1\21\1\0\3\17\1\71\1\16\15\17"+
    "\13\0\3\110\30\0\1\73\1\0\3\111\5\0\1\73"+
    "\22\0\1\112\11\0\1\42\24\0\3\113\30\0\1\21"+
    "\1\0\3\114\1\0\1\16\15\17\30\0\1\115\6\0"+
    "\2\46\3\0\11\46\5\47\1\64\2\47\1\116\4\47"+
    "\1\46\10\0\1\27\1\0\3\110\1\0\1\16\26\0"+
    "\1\102\1\0\3\117\1\0\1\16\3\17\1\104\11\17"+
    "\11\0\1\21\1\0\3\120\1\0\1\16\15\17\13\0"+
    "\3\121\30\0\1\21\1\0\3\122\1\0\1\16\15\17"+
    "\12\0\1\123\10\0\1\123\15\0\2\124\1\125\4\0"+
    "\3\126\30\0\1\73\11\0\1\73\24\0\3\127\32\0"+
    "\3\130\30\0\1\21\1\0\3\131\1\0\1\16\15\17"+
    "\4\0\2\132\1\133\30\0\2\46\2\132\1\133\11\46"+
    "\5\47\1\64\7\47\1\46\10\0\1\102\1\0\3\17"+
    "\1\0\1\16\3\17\1\104\11\17\4\0\2\124\1\125"+
    "\2\0\1\21\1\0\3\134\1\0\1\16\15\17\13\0"+
    "\3\135\30\0\1\21\1\0\3\136\1\0\1\16\15\17"+
    "\13\0\3\137\2\0\15\137\4\0\1\140\34\0\2\124"+
    "\1\125\4\0\3\141\30\0\1\73\1\0\3\142\5\0"+
    "\1\73\24\0\3\143\30\0\1\21\1\0\3\144\1\0"+
    "\1\16\15\17\4\0\1\145\34\0\2\124\1\125\2\0"+
    "\1\21\1\0\3\146\1\0\1\16\15\17\4\0\2\147"+
    "\1\150\32\0\2\147\1\150\2\0\1\21\1\0\3\17"+
    "\1\0\1\16\15\17\11\0\1\151\1\0\3\137\2\0"+
    "\3\137\1\152\11\137\4\0\2\124\1\125\37\0\1\73"+
    "\1\0\3\153\5\0\1\73\15\0\2\154\1\155\1\0"+
    "\1\156\35\0\1\21\1\0\3\157\1\0\1\16\15\17"+
    "\4\0\2\124\1\125\2\0\1\21\1\0\3\17\1\0"+
    "\1\16\15\17\4\0\1\147\55\0\1\160\20\0\1\151"+
    "\1\0\3\137\2\0\3\137\1\152\1\137\1\161\7\137"+
    "\11\0\1\73\1\162\10\0\1\73\15\0\1\154\43\0"+
    "\3\163\30\0\1\21\1\0\3\164\1\0\1\16\15\17"+
    "\31\0\1\165\14\0\1\151\1\0\3\137\2\0\3\137"+
    "\1\152\5\137\1\166\3\137\13\0\1\167\34\0\3\170"+
    "\30\0\1\21\1\0\3\171\1\0\1\16\15\17\30\0"+
    "\1\172\15\0\1\151\1\0\3\137\2\0\3\137\1\152"+
    "\4\137\1\173\4\137\13\0\1\174\34\0\3\175\30\0"+
    "\1\21\1\0\3\176\1\0\1\16\15\17\4\0\2\177"+
    "\1\200\32\0\2\177\1\200\2\0\1\151\1\0\3\137"+
    "\2\0\3\137\1\152\11\137\13\0\1\201\34\0\3\202"+
    "\23\0\2\203\1\204\2\0\1\21\1\0\3\17\1\0"+
    "\1\16\15\17\4\0\1\205\44\0\1\206\30\0\1\207"+
    "\30\0\1\203\40\0\1\210\37\0\3\211\32\0\3\212"+
    "\32\0\3\213\32\0\3\214\32\0\3\215\23\0\2\216"+
    "\1\217\41\0\3\220\23\0\1\216\34\0\2\221\1\222"+
    "\32\0\1\221\32\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3828];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\12\0\1\11\77\0\1\11\1\1"+
    "\4\0\1\11\1\1\4\0\1\11\4\0\1\11\1\0"+
    "\1\11\1\1\3\0\1\11\1\1\21\0\1\11\1\1"+
    "\2\0\1\11\1\1\1\11\10\0\1\11\1\1\1\0"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 14: break;
          case 2:
            { System.out.println("Números Reais");
            }
          // fall through
          case 15: break;
          case 3:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("IP");
            }
          // fall through
          case 16: break;
          case 4:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("Email");
            }
          // fall through
          case 17: break;
          case 5:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("IP");
            }
          // fall through
          case 18: break;
          case 6:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("Email");
            }
          // fall through
          case 19: break;
          case 7:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 8);
            { System.out.println("Placa Mercosul");
            }
          // fall through
          case 20: break;
          case 8:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 9);
            { System.out.println("Telefone fixo");
            }
          // fall through
          case 21: break;
          case 9:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { System.out.println("URL");
            }
          // fall through
          case 22: break;
          case 10:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 13);
            { System.out.println("ISBN");
            }
          // fall through
          case 23: break;
          case 11:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { System.out.println("URL");
            }
          // fall through
          case 24: break;
          case 12:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 18);
            { System.out.println("CNPJ");
            }
          // fall through
          case 25: break;
          case 13:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 19);
            { System.out.println("Cartão de Crédito");
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Yylex scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Yylex(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
